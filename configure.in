dnl ***************************************************************
dnl gaul-examples/configure.in
dnl ***************************************************************
dnl
dnl GAUL - Genetic Algorithm Utility Library.
dnl Copyright Â©2001-2005, Stewart Adcock <stewart@linux-domain.com>
dnl All rights reserved.
dnl
dnl The latest version of this program should be available at:
dnl http://gaul.sourceforge.net/
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.  Alternatively, if your project
dnl is incompatible with the GPL, I will probably agree to requests
dnl for permission to use the terms of any other license.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY WHATSOEVER.
dnl
dnl A full copy of the GNU General Public License should be in the file
dnl "COPYING" provided with this distribution; if not, see:
dnl http://www.gnu.org/
dnl
dnl ***************************************************************
dnl
dnl To do:	Consider use of AC_TRY_CFLAGS().
dnl		use -axN with icc of P4,Mobile P4
dnl		use -Wp64 -Wcheck with icc on Itanium
dnl
dnl ***************************************************************

#
# We require autoconf 2.57 or above
#
AC_PREREQ(2.57)

#
# init autoconf
# Specify a configuration file
#
AC_INIT(gaul-examples, 0.1849, gaul@linux-domain.com)

PACKAGE="gaul-examples"
GA_MAJOR_VERSION=0
GA_MINOR_VERSION=1849
GA_PATCH_VERSION=0
GA_VERSION=${GA_MAJOR_VERSION}.${GA_MINOR_VERSION}-${GA_PATCH_VERSION}

AC_CANONICAL_SYSTEM

#
# Set some defines required to their default values.
# FIXME: should allow configuration-time modification for many of these.
#
#AC_DEFINE_UNQUOTED(GA_MAJOR_VERSION, ${GA_MAJOR_VERSION}, [Major version number.])
#AC_DEFINE_UNQUOTED(GA_MINOR_VERSION, ${GA_MINOR_VERSION}, [Minor version number.])
#AC_DEFINE_UNQUOTED(GA_PATCH_VERSION, ${GA_PATCH_VERSION}, [Patch level.])

#AC_DEFINE_UNQUOTED(GA_UNAME_STRING, "`uname -a`", [Record compilation platform information.])
#AC_DEFINE_UNQUOTED(GA_BUILD_DATE_STRING, "`date +%d/%m/%y`", [Record date of compilation.])
#AC_DEFINE_UNQUOTED(GA_VERSION_STRING, "${GA_VERSION}", [Version string.])

# Initialise Automake.
AM_INIT_AUTOMAKE($PACKAGE, $GA_VERSION, gaul@linux-domain.com)

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

# Initialize maintainer mode
#AM_MAINTAINER_MODE

#
# declare --enable-* args and collect ac_help strings
#
AC_ARG_ENABLE(g,
       [  --enable-g=[yes/no]             compile with symbolic debug information. [default=yes]],,
       enable_g=yes)
AC_ARG_ENABLE(ccoptim,
       [  --enable-ccoptim=[yes/no]       compile with guessed compiler optimisation flags. [default=yes]],,
       enable_ccoptim=yes)
AC_ARG_ENABLE(ansi,
       [  --enable-ansi=[yes/no]          turn on strict ansi. [default=no]],,
       enable_ansi=no)
AC_ARG_ENABLE(missing_prototypes,
       [  --enable-missing-prototypes=[yes/no] turn on missing prototype checks. [default=no]],,
       enable_missing_prototypes=no)
AC_ARG_ENABLE(pthread,
       [  --enable-pthread=[yes/no]       turn on multi-thread support using pthread. [default=yes]],,
       enable_pthread=yes)
AC_ARG_ENABLE(openmp,
       [  --enable-openmp=[yes/no]        turn on multi-thread support using OpenMP. [default=no]],,
       enable_openmp=no)
AC_ARG_ENABLE(parallel,
       [  --enable-parallel=[yes/no]      turn on auto-parallelisation for Intel's icc compiler. [default=no]],,
       enable_parallel=no)
AC_ARG_ENABLE(mpi,
       [  --enable-mpi=[yes/no]           turn on MPI support. [default=no]],,
       enable_mpi=no)
AC_ARG_ENABLE(slang,
       [  --enable-slang=[yes/no]         use S-Lang for scripting. [default=yes]],,
       enable_slang=yes)
AC_ARG_ENABLE(prof,
       [  --enable-profile=[yes/no]       turn on profiling. [default=no]],,
       enable_prof=no)
AC_ARG_ENABLE(efence,
       [  --enable-efence=[yes/no]        use Electric Fence for memory debugging. [default=no]],,
       enable_efence=no)
AC_ARG_ENABLE(padding,
       [  --enable-padding=[yes/no]       use memory padding for overflow detection. [default=no]],,
       enable_padding=no)
AC_ARG_ENABLE(memory_chunks,
       [  --enable-memory-chunks=[yes/no] use memory chunk allocation routines. [default=yes]],,
       enable_memory_chunks=yes)
AC_ARG_ENABLE(num_procs,
       [  --enable-num-procs=[INT]        default number of processes to spawn in MP code. [default=8]],,
       enable_num_procs=8)
AC_ARG_ENABLE(num_threads,
       [  --enable-num-threads=[INT]      default number of threads to create in threaded code. [default=4]],,
       enable_num_threads=4)
AC_ARG_ENABLE(w32_subset,
       [  --enable-w32-subset=[yes/no]    compile a subset of GAUL for windows. [default=no]],,
       enable_w32_subset=no)

AC_MSG_CHECKING(for default number of processes to spawn in MP code)
AC_DEFINE_UNQUOTED(GA_DEFAULT_NUM_PROCESSES, ${enable_num_procs}, [Default number of processes.])
AC_MSG_RESULT(${enable_num_procs})

AC_MSG_CHECKING(for default number of threads to create in threaded code)
AC_DEFINE_UNQUOTED(GA_DEFAULT_NUM_THREADS, ${enable_num_threads}, [Default number of threads.])
AC_MSG_RESULT(${enable_num_threads})

#
# Check for pthreads
#
AC_MSG_CHECKING(whether to link to pthread library)
if test "x$enable_pthread" = "xyes"; then
  AC_MSG_RESULT(yes)
  WILL_USE_PTHREADS="yes"
  HAVE_PTHREADS=1
  LIBS="$LIBS -lpthread"
  AC_CHECK_LIB(pthread, pthread_create,
    [LIBS="$LIBS -lpthread"],
    [AC_MSG_ERROR(GAUL requires the pthread library for full functionality.  Install it or configure with '--enable-pthread=no' for reduced version.)])
  result=1
else
  AC_MSG_RESULT(no)
  WILL_USE_PTHREADS="no"
  result=0
  HAVE_PTHREADS=0
fi
AC_DEFINE_UNQUOTED(HAVE_PTHREADS, ${result}, [Whether libpthread is installed.])

#
# Check for OpenMP
#
AC_MSG_CHECKING(whether to use OpenMP)
if test "x$enable_openmp" = "xyes"; then
  AC_MSG_RESULT(yes)
  WILL_USE_OPENMP="yes"
  USE_OPENMP=1
  result=1
else
  AC_MSG_RESULT(no)
  WILL_USE_OPENMP="no"
  result=0
  USE_OPENMP=0
fi
AC_DEFINE_UNQUOTED(USE_OPENMP, ${result}, [Whether OpenMP should be used.])

# A sanity check.
if test "x$WILL_USE_PTHREADS" = "xyes" && test "x$WILL_USE_OPENMP" = "xyes"; then
 AC_MSG_ERROR(Can not simultaneously use OpenMP and pthreads for thread-level parallelisation.)
fi

# A sanity check.
if test "x$enable_parallel" = "xyes"; then
AC_MSG_CHECKING(whether to autoparallelise code)
 if test "x$CC" = "xicc"; then
   AC_MSG_RESULT(yes)
 else
   AC_MSG_ERROR(--enable-parallel=yes can only be used with Intel's icc compiler.)
  fi
fi

#
# Setup MPI compilation
#
old_LIBS=$LIBS
old_CFLAGS=$CFLAGS
AC_MSG_CHECKING(whether to use MPI)
if test "x$enable_mpi" != "xyes"; then
  AC_MSG_RESULT(no)
  enable_mpi=no
  MPIFLAGS=""
  MPILIBS=""
  WILL_USE_MPI="no"
  HAVE_MPI=0
  result=0
else
  AC_MSG_RESULT(yes)
  result=1
#
# Check for MPI version.
#
  if test "x$MPIFLAGS" != "x" || test "x$MPILIBS" != "x"; then
    # User defined the additional LIBS and CFLAGS stuff :-).
    # "-lm" used in AC_CHECK_LIB as dummy library.
    LIBS="$old_LIBS $MPILIBS"
    CFLAGS="$old_CFLAGS $MPIFLAGS"
    AC_CHECK_LIB(m, MPI_Init,,
      [AC_MSG_ERROR(Unable to compile with specified MPI implementation.  Check MPIFLAGS and MPILIBS environment variables, or configure with '--enable-mpi=no' to disable MPI use.)])
  else
	  # User didn't define the additional LIBS and CFLAGS stuff, so we must try to guess it :-(
#    AC_MSG_WARN([You are advised to specify requirements of your MPI implementation via the MPIFLAGS and MPILIBS environment variables.])
    # Try LAM
    AC_MSG_CHECKING(for LAM-MPI)
    MPIFLAGS="-D_REENTRANT"
    MPILIBS="-llammpio -llamf77mpi -lmpi -llam -lutil -lpthread"
    LIBS="$old_LIBS $MPILIBS"
    CFLAGS="$old_CFLAGS $MPIFLAGS"

    AC_CHECK_LIB(mpi, MPI_Init,, [result=0])

    if test result = 0; then
      AC_MSG_RESULT(no)
      # Try MPICH
      AC_MSG_CHECKING(for MPICH)
      result=1
      MPIFLAGS="-DUSE_STDARG -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DHAVE_STDARG_H=1 -DUSE_STDARG=1 -DMALLOC_RET_VOID=1"
      MPILIBS="-lmpich"
      LIBS="$old_LIBS $MPILIBS"
      CFLAGS="$old_CFLAGS $MPIFLAGS"
    
      AC_CHECK_LIB(mpich, MPI_Init,, [result=0])

      if test result = 0; then
        AC_MSG_RESULT(no)
      else
        AC_MSG_RESULT(yes)
      fi
    else
      AC_MSG_RESULT(yes)
    fi
  fi
  if test ${result} = 0; then
    WILL_USE_MPI="no"
    HAVE_MPI=0
    AC_MSG_ERROR(Unable to locate an installed MPI implementation.  Manually set the MPIFLAGS and MPILIBS environment variables, or configure with '--enable-mpi=no' to disable MPI use.)
  else
    WILL_USE_MPI="yes"
    HAVE_MPI=1
  fi
fi
AC_DEFINE_UNQUOTED( HAVE_MPI, ${result}, [Whether to use MPI for parallel code.])
# Reset CFLAGS and LIBS variables.
LIBS=$old_LIBS
CFLAGS=$old_CFLAGS

#
# Check for GAUL.
# Obviously, GAUL is needed for the GAUL examples to work!
#
AC_MSG_CHECKING(whether GAUL is installed correctly)
LIBS="$LIBS -lgaul -lgaul_util"
AC_CHECK_LIB(gaul, ga_diagnostics,,
  [AC_MSG_ERROR(The GAUL examples require that GAUL itself is installed.)])
AC_MSG_RESULT(yes)

#
# Check for S-Lang.
#
AC_MSG_CHECKING(whether to link S-Lang scripting engine)
if test "x$enable_slang" = "xyes"; then
  AC_MSG_RESULT(yes)
  WILL_USE_SLANG="yes"
  HAVE_SLANG=1
  LIBS="$LIBS -lslang -lm"
  INCLUDES="$INCLUDES -I/usr/include/slang/"    # FIXME: Need to detect slang.h location properly.
  AC_CHECK_LIB(slang, SLang_init_slang,
    [LIBS="$LIBS -lslang"],
    [AC_MSG_ERROR(GAUL requires the S-Lang library for full functionality.  see http://space.mit.edu/pub/davis/slang/  Or configure with '--enable-slang=no' for reduced version.)])
  result=1
else
  AC_MSG_RESULT(no)
  WILL_USE_SLANG="no"
  result=0
  HAVE_SLANG=0
fi
AC_DEFINE_UNQUOTED(HAVE_SLANG, ${result}, [Whether S-Lang is installed.])

#
# Electric Fence has to be last library linked.
#
AC_MSG_CHECKING(whether to link Electric Fence for memory debugging)
if test "x$enable_efence" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_CHECK_LIB(efence, malloc, [LIBS="$LIBS -lefence"], [AC_MSG_ERROR(Unable to detect working Electric Fence installation)])
else
  AC_MSG_RESULT(no)
fi

#AC_SUBST(GA_MAJOR_VERSION)
#AC_SUBST(GA_MINOR_VERSION)
#AC_SUBST(GA_PATCH_VERSION)
#AC_SUBST(GA_VERSION)
#AC_SUBST(GA_VERSION_STRING)

AC_SUBST(MPIFLAGS)
AC_SUBST(MPILIBS)

AC_SUBST(GA_UNAME_STRING)
AC_SUBST(GA_BUILD_DATE_STRING)
AC_SUBST(V3_QUICK)
AC_SUBST(HAVE_MPI)
AC_SUBST(HAVE_PTHREADS)
AC_SUBST(USE_OPENMP)

#
# Compiler specific switches.
#
if test "x$enable_ccoptim" = "xyes"; then
  changequote(,)dnl
  case $CC in
    gcc)
      # Optimisations etc. for the GNU gcc compiler.
      case " $CFLAGS " in
        *[\ \	]-Wall[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Wall" ;;
      esac

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g" ;;
        esac

        case " $CFLAGS " in
          *[\ \	]-O2[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -O2" ;;
        esac

      else
        case " $CFLAGS " in
          *[\ \	]-O3[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -O3" ;;
        esac

      fi

      if test "x$enable_prof" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-pg[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -pg" ;;
        esac
      fi

      if test "x$enable_missing_prototypes" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-Wmissing-prototypes[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -Wmissing-prototypes" ;;
        esac
      fi

      if test "x$enable_ansi" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-ansi[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -ansi" ;;
        esac

        case " $CFLAGS " in
          *[\ \	]-pedantic[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -pedantic" ;;
        esac
      fi
    ;;

    icc)
# Optimisations etc. for the Intel C++ compiler.

      case " $CFLAGS " in
        *[\ \	]-w1[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -w2" ;;
      esac

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g" ;;
        esac

        case " $CFLAGS " in
          *[\ \	]-O2[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -O2" ;;
        esac

      else

        case " $CFLAGS " in
          *[\ \	]-O3[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -O3" ;;
        esac

      fi

      case " $CFLAGS " in
        *[\ \	]-ipo[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -ipo -ipo_obj" ;;
      esac

      if test "x$enable_openmp" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-openmp[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -openmp -openmp_report2" ;;
        esac
      fi

      if test "x$enable_parallel" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-parallel[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -parallel -parthreshold50 -par_report3" ;;
        esac
      fi

      if test "x$enable_prof" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-qp[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -qp" ;;
        esac
      fi

      if test "x$enable_ansi" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-ansi[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -ansi" ;;
        esac
      fi
      ;;

    ccc)
# Kludges etc. for the Compaq C Compiler

        if test "x$enable_g" = "xyes"; then
          case " $CFLAGS " in
            *[\ \	]-g[\ \	]*) ;;
            *) CFLAGS="$CFLAGS -g3" ;;
          esac

        else
          case " $CFLAGS " in
            *[\ \	]-O3[\ \	]*) ;;
            *) CFLAGS="$CFLAGS -O3" ;;
          esac

        fi

        case " $CFLAGS " in
          *[\ \	]-Wall[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -Wall" ;;
        esac

        case " $CFLAGS " in
          *[\ \	]-misalign[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -misalign" ;;
        esac
      ;;

    pgcc)
# The Portland Group C compiler.
# Note: Should consider use of -tp flags to specify processor type.
# I should also consider investigating the pgcc profiling options.

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g" ;;
        esac

      else
        case " $CFLAGS " in
          *[\ \	]-fast[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -fast" ;;
        esac

      fi

      case " $CFLAGS " in
        *[\ \	]-Xa[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Xa" ;;
      esac
    ;;
  *)
# Could be any compiler!
# Kludges etc. for the Sun C Compiler.
    if test "x$CC" = "xcc"; then
      if test "x$target" = "xsparc-sun-solaris2.8"; then

        if test "x$enable_ansi" = "xyes"; then
          case " $CFLAGS " in
            *[\ \	]-ansi[\ \	]*) ;;
            *) CFLAGS="$CFLAGS -ansi" ;;
          esac
        fi
      fi
    fi
    ;;

  esac
  changequote([,])dnl
fi

#
# Stuff.
#
AC_C_CONST
AC_STRUCT_TM

#
# Some processor specific stuff.
#
AC_MSG_CHECKING(whether to apply processor specific optimisations)
if test "x$enable_ccoptim" = "xyes"; then
  case "$target" in
    i586-*-*)
      AC_MSG_RESULT(yes - i586)
      case "$CC" in
        icc)
          case " $CFLAGS " in
            *[\ \	]-tpp[1-9\ \	]*) ;;
	    # -axK
            *) CFLAGS="$CFLAGS -tpp6" ;;
          esac
          ;;
        gcc)
          case " $CFLAGS " in
            *[\ \	]-mcpu=*) ;;
            *) CFLAGS="$CFLAGS -mcpu=pentium" ;;
          esac
          ;;
      esac
      ;;
    i686-*-*)
      AC_MSG_RESULT(yes - i686)
      case "$CC" in
        icc)
          case " $CFLAGS " in
            *[\ \	]-tpp[1-9\ \	]*) ;;
	    # -axW
            *) CFLAGS="$CFLAGS -tpp7" ;;
          esac
          ;;
        gcc)
          case " $CFLAGS " in
            *[\ \	]-mcpu=*) ;;
            *) CFLAGS="$CFLAGS -mcpu=pentiumpro" ;;
          esac
          ;;
      esac
      ;;
    *)
      AC_MSG_RESULT(no - none defined for ${target})
      ;;
  esac
else
  AC_MSG_RESULT(no disabled)
fi

dnl GAUL_GNUMAKE_WARN
dnl Produce warning message if non-GNU make is detected.
temp=`make -version -f \dev\null 2>&1 | grep GNU`
if test "x$temp" = "x"; then
  AC_MSG_WARN([You are advised to use GNU Make when compiling GAUL])
fi

# Where the linker must look!
CFLAGS="$CFLAGS $INCLUDES"
#LIBS="$LIBS"
#LIBS="$LIBS $MPILIBS"

AC_OUTPUT([Makefile src/Makefile debian/Makefile])

echo \
"************************************************************************
  GAUL has been configured successfully.  In summary:

  Version:                    ${GA_VERSION}
  Source code location:       ${srcdir}
  Host system type:           ${host}
  Target system type:         ${target}
  C compiler:                 ${CC}
  C compiler flags:           ${CFLAGS}
  Additional include flags:   ${INCLUDES}
  Install path:               ${prefix}
  Use MPI:                    ${WILL_USE_MPI}
  Use pthreads:               ${WILL_USE_PTHREADS}

************************************************************************"

